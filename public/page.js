// Generated by CoffeeScript 1.7.1
var appContext, socket,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

require.config({
  paths: {
    jquery: "/components/jquery/dist/jquery.min",
    bootstrap: "/components/bootstrap/dist/js/bootstrap.min",
    batman: "/batmanjs/batman",
    wordcloud: "/wordcloudjs/wordcloud",
    typeahead: "/components/typeahead.js/dist/typeahead.bundle.min",
    dropzone: "/components/dropzone/downloads/dropzone-amd-module.min",
    socketIO: "/socket.io/socket.io",
    async: "/components/async/lib/async"
  },
  shim: {
    bootstrap: {
      deps: ["jquery"]
    },
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    },
    wordcloud: {
      exports: "WordCloud"
    },
    typeahead: {
      deps: ["jquery"]
    },
    dropzone: {
      deps: ["jquery"]
    }
  },
  waitSeconds: 30
});

appContext = void 0;

socket = void 0;

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "wordcloud", "socketIO", "async", "bootstrap", "typeahead", "dropzone"], function($, Batman, WordCloud, socketIO, async) {
  var AppContext, Corpus, Curation, Index, Record, STM, Subcorpus, Topic, Topics, findInStr, isScrolledIntoView;
  findInStr = function(chars, str, j) {
    var idx, ret;
    if (j == null) {
      j = 0;
    }
    if (chars === "") {
      return [];
    }
    if ((idx = str.indexOf(chars[0])) === -1) {
      return;
    }
    if ((ret = findInStr(chars.slice(1), str.slice(idx + 1), idx + j + 1)) != null) {
      return [idx + j].concat(ret);
    }
  };
  isScrolledIntoView = function(elem) {
    var elemTop;
    return (elemTop = $(elem).position().top) >= 0 && (elemTop + $(elem).height()) <= $(elem).parent().height();
  };
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    function AppContext() {
      AppContext.__super__.constructor.apply(this, arguments);
      if (window.location.pathname === "/") {
        this.set("indexContext", Index.context = new Index.Context);
      }
      if (window.location.pathname === "/topics") {
        this.set("topicsContext", Topics.context = new Topics.Context);
      }
      if (window.location.pathname === "/curation") {
        this.set("curationContext", Curation.context = new Curation.Context);
      }
    }

    return AppContext;

  })(Batman.Model);
  Index = new Object;
  (function(exports) {
    return exports.Context = (function(_super) {
      __extends(Context, _super);

      function Context() {
        Context.__super__.constructor.apply(this, arguments);
      }

      return Context;

    })(Batman.Model);
  })(Index);
  Topics = new Object;
  (function(exports) {
    return exports.Context = (function(_super) {
      __extends(Context, _super);

      Context.accessor("currentCorpus", function() {
        return this.get("corpora").find((function(_this) {
          return function(x) {
            return x.get("name") === _this.get("corpus_text");
          };
        })(this));
      });

      Context.accessor("currentSubcorpus", function() {
        var _ref;
        return (_ref = this.get("currentCorpus.subcorpora")) != null ? _ref.find((function(_this) {
          return function(x) {
            return x.get("name") === _this.get("subcorpus_text");
          };
        })(this)) : void 0;
      });

      Context.accessor("currentTopic", function() {
        var _ref;
        return (_ref = this.get("currentSubcorpus.topics")) != null ? _ref.find((function(_this) {
          return function(x) {
            return x.get("name") === _this.get("topic_text");
          };
        })(this)) : void 0;
      });

      Context.accessor("corpusIsSelected", function() {
        return this.get("currentCorpus") != null;
      });

      Context.accessor("subcorpusIsSelected", function() {
        return this.get("currentSubcorpus") != null;
      });

      Context.accessor("topicIsSelected", function() {
        return this.get("currentTopic") != null;
      });

      function Context() {
        var _ref;
        Context.__super__.constructor.apply(this, arguments);
        this.set("corpora", new Batman.Set);
        this.set("corpus_text", "");
        this.set("subcorpus_text", "");
        this.set("topic_text", "");
        this.set("corpus_placeholder", "Corpus");
        this.set("subcorpus_placeholder", "Subcorpus");
        this.set("topic_placeholder", "Topic");
        $.ajax({
          url: "/data/corporaList",
          dataType: "jsonp",
          data: {
            processedOnly: true
          },
          success: (function(_this) {
            return function(response) {
              var _ref;
              return (_ref = _this.get("corpora")).add.apply(_ref, response.map(function(x) {
                return new Corpus(x);
              }));
            };
          })(this),
          error: function(request) {
            return console.error(request);
          }
        });
        $("#corpusInput").typeahead({
          minLength: 0,
          highlight: true
        }, {
          source: (function(_this) {
            return function(query, callback) {
              return callback(_this.get("corpora").filter(function(x) {
                return x.get("name").toLowerCase().match(query.toLowerCase());
              }).toArray());
            };
          })(this),
          displayKey: function(x) {
            return x.get("name");
          }
        }).on("typeahead:opened", (function(_this) {
          return function() {
            return _this.set("corpus_typeahead_open", true);
          };
        })(this)).on("typeahead:closed", (function(_this) {
          return function() {
            return _this.set("corpus_typeahead_open", false);
          };
        })(this)).on("typeahead:selected", (function(_this) {
          return function() {
            return _this.set("corpus_text", $("#corpusInput").typeahead("val"));
          };
        })(this));
        $("#subcorpusInput").typeahead({
          minLength: 0,
          highlight: true
        }, {
          source: (function(_this) {
            return function(query, callback) {
              var _ref;
              return (_ref = _this.get("currentCorpus")) != null ? _ref.loadSubcorpora(function(err, corpus) {
                return callback(corpus.get("subcorpora").filter(function(x) {
                  return x.get("name").toLowerCase().match(query.toLowerCase());
                }).toArray());
              }) : void 0;
            };
          })(this),
          displayKey: function(x) {
            return x.get("name");
          }
        }).on("typeahead:opened", (function(_this) {
          return function() {
            return _this.set("subcorpus_typeahead_open", true);
          };
        })(this)).on("typeahead:closed", (function(_this) {
          return function() {
            return _this.set("subcorpus_typeahead_open", false);
          };
        })(this)).on("typeahead:selected", (function(_this) {
          return function() {
            return _this.set("subcorpus_text", $("#subcorpusInput").typeahead("val"));
          };
        })(this));
        (_ref = $("#topicInput")).typeahead.apply(_ref, [{
          minLength: 0,
          highlight: true
        }].concat(__slice.call([
          {
            name: "visible_top",
            source: (function(_this) {
              return function(query, callback) {
                var _ref;
                return (_ref = _this.get("currentSubcorpus")) != null ? _ref.loadTopics(function(err, subcorpus) {
                  return callback(subcorpus.get("topics").filter(function(x) {
                    return !x.get("hidden") && x.get("name").toLowerCase().match(query.toLowerCase());
                  }).toArray().slice(0, 11));
                }) : void 0;
              };
            })(this),
            displayKey: function(x) {
              return x.get("name");
            }
          }, {
            name: "hidden_topics",
            source: (function(_this) {
              return function(query, callback) {
                var _ref;
                return (_ref = _this.get("currentSubcorpus")) != null ? _ref.loadTopics(function(err, subcorpus) {
                  return callback(subcorpus.get("topics").filter(function(x) {
                    return x.get("hidden") && x.get("name").toLowerCase().match(query.toLowerCase());
                  }).toArray().slice(0, 11));
                }) : void 0;
              };
            })(this),
            displayKey: function(x) {
              return x.get("name");
            }
          }
        ]))).on("typeahead:opened", (function(_this) {
          return function() {
            return _this.set("topic_typeahead_open", true);
          };
        })(this)).on("typeahead:closed", (function(_this) {
          return function() {
            return _this.set("topic_typeahead_open", false);
          };
        })(this)).on("typeahead:selected", (function(_this) {
          return function() {
            return _this.set("topic_text", $("#topicInput").typeahead("val"));
          };
        })(this));
        this.observe("currentTopic", (function(_this) {
          return function(topic) {
            if (topic != null) {
              return topic.onReady(function(err, topic) {
                _this.drawWordCloud(topic);
                _this.drawPhraseCloud(topic);
                return topic.get("records").add();
              });
            } else {
              $("#wordcloud").html("");
              $("#phrasecloud").html("");
              return _this.set("records", []);
            }
          };
        })(this));
      }

      Context.prototype.drawWordCloud = function(topic) {
        var wordsMax, wordsMin;
        wordsMax = Math.max.apply(Math, topic.get("words").map(function(x) {
          return x.count;
        }));
        wordsMin = Math.min.apply(Math, topic.get("words").map(function(x) {
          return x.count;
        }));
        return WordCloud($("#wordcloud")[0], {
          list: topic.get("words").map(function(x) {
            return [x.word, (x.count - wordsMin + 1) / (wordsMax - wordsMin + 1) * 30 + 12];
          }),
          gridSize: 10,
          minRotation: -0.5,
          maxRotation: 0.5,
          rotateRatio: 0.2,
          ellipticity: 0.5,
          wait: 0,
          abort: function() {
            return console.error(arguments);
          }
        });
      };

      Context.prototype.drawPhraseCloud = function(topic) {
        var phrasesMax, phrasesMin;
        phrasesMax = Math.max.apply(Math, topic.get("phrases").map(function(x) {
          return x.count;
        }));
        phrasesMin = Math.min.apply(Math, topic.get("phrases").map(function(x) {
          return x.count;
        }));
        return WordCloud($("#phrasecloud")[0], {
          list: topic.get("phrases").map(function(x) {
            return [x.phrase, (x.count - phrasesMin + 1) / (phrasesMax - phrasesMin + 1) * 30 + 12];
          }),
          gridSize: 10,
          minRotation: -0.5,
          maxRotation: 0.5,
          rotateRatio: 0.2,
          ellipticity: 0.5,
          wait: 0,
          abort: function() {
            return console.error(arguments);
          }
        });
      };

      Context.prototype.gotoTopic = function(node) {
        var _ref, _ref1, _ref2;
        if ((_ref = this.get("topics").filter(function(x) {
          return x.get("id") === Number($(node).data("id"));
        })[0]) != null) {
          _ref.onReady((function(_this) {
            return function(err, topic) {
              _this.set("currentTopic", topic);
              _this.drawWordCloud();
              return _this.drawPhraseCloud();
            };
          })(this));
        }
        this.set("topicSearch_text", (_ref1 = (_ref2 = this.get("topics").filter(function(x) {
          return x.get("id") === Number($(node).data("id"));
        })[0]) != null ? _ref2.get("name") : void 0) != null ? _ref1 : "");
        return this.set("topicsList_activeIndex", 0);
      };

      Context.prototype.text_focused = function(elem) {
        if ($(elem).attr("id") === "corpusInput") {
          return this.set("corpus_placeholder", "");
        } else if ($(elem).attr("id") === "subcorpusInput") {
          return this.set("subcorpus_placeholder", "");
        } else if ($(elem).attr("id") === "topicInput") {
          return this.set("topic_placeholder", "");
        }
      };

      Context.prototype.text_blurred = function(elem) {
        if ($(elem).attr("id") === "corpusInput") {
          return this.set("corpus_placeholder", this.get("corpus_text") === "" ? "Corpus" : "");
        } else if ($(elem).attr("id") === "subcorpusInput") {
          return this.set("subcorpus_placeholder", this.get("subcorpus_text") === "" ? "Subcorpus" : "");
        } else if ($(elem).attr("id") === "topicInput") {
          return this.set("topic_placeholder", this.get("topic_text") === "" ? "Topic" : "");
        }
      };

      return Context;

    })(Batman.Model);
  })(Topics);
  Curation = new Object;
  (function(exports) {
    var AddFilesView, MalletProcessView, MetadataView, PendingTasksView, UploadTask;
    exports.Context = (function(_super) {
      __extends(Context, _super);

      function Context() {
        Context.__super__.constructor.apply(this, arguments);
        this.set("metadataView", new MetadataView);
        this.set("addFilesView", new AddFilesView);
        this.set("pendingTasksView", new PendingTasksView);
        this.set("malletProcessView", new MalletProcessView);
        socket = socketIO.connect();
      }

      return Context;

    })(Batman.Model);
    MetadataView = (function(_super) {
      __extends(MetadataView, _super);

      MetadataView.accessor("currentCorpus", function() {
        return this.get("corpora").find((function(_this) {
          return function(x) {
            return x.get("name") === _this.get("corpus_text");
          };
        })(this));
      });

      MetadataView.accessor("currentSubcorpus", function() {
        var _ref;
        return (_ref = this.get("currentCorpus.subcorpora")) != null ? _ref.find((function(_this) {
          return function(x) {
            return x.get("name") === _this.get("subcorpus_text");
          };
        })(this)) : void 0;
      });

      MetadataView.accessor("corpusIsNew", function() {
        return (this.get("currentCorpus") == null) && (this.get("corpus_text").match(/^\s*$/) == null) && !this.get("corpus_typeahead_open");
      });

      MetadataView.accessor("corpusIsSelected", function() {
        return this.get("currentCorpus") != null;
      });

      MetadataView.accessor("subcorpusIsNew", function() {
        return (this.get("currentSubcorpus") == null) && (this.get("subcorpus_text").match(/^\s*$/) == null) && !this.get("subcorpus_typeahead_open") && (this.get("currentCorpus") != null);
      });

      MetadataView.accessor("subcorpusIsSelected", function() {
        return this.get("currentSubcorpus") != null;
      });

      function MetadataView() {
        MetadataView.__super__.constructor.apply(this, arguments);
        this.set("corpora", new Batman.Set);
        this.set("corpus_text", "");
        this.set("subcorpus_text", "");
        this.set("corpus_typeahead_open", false);
        this.set("subcorpus_typeahead_open", false);
        this.observe("currentCorpus", function(corpus) {
          return corpus != null ? corpus.loadSubcorpora() : void 0;
        });
        this.observe("currentSubcorpus", function(subcorpus) {
          if (subcorpus != null) {
            subcorpus.loadFilesList(0, function() {
              return subcorpus.get("filesList").add();
            });
          }
          return subcorpus != null ? subcorpus.loadStatus() : void 0;
        });
        $.ajax({
          url: "/data/corporaList",
          dataType: "jsonp",
          success: (function(_this) {
            return function(response) {
              var _ref;
              return (_ref = _this.get("corpora")).add.apply(_ref, response.map(function(x) {
                return new Corpus(x);
              }));
            };
          })(this),
          error: function(request) {
            return console.error(request);
          }
        });
        $("#corpusInput").typeahead({
          minLength: 0,
          highlight: true
        }, {
          source: (function(_this) {
            return function(query, callback) {
              return callback(_this.get("corpora").filter(function(x) {
                return x.get("name").toLowerCase().match(query.toLowerCase());
              }).toArray());
            };
          })(this),
          displayKey: function(x) {
            return x.get("name");
          }
        }).on("typeahead:opened", (function(_this) {
          return function() {
            return _this.set("corpus_typeahead_open", true);
          };
        })(this)).on("typeahead:closed", (function(_this) {
          return function() {
            return _this.set("corpus_typeahead_open", false);
          };
        })(this)).on("typeahead:selected", (function(_this) {
          return function() {
            return _this.set("corpus_text", $("#corpusInput").typeahead("val"));
          };
        })(this));
        $("#subcorpusInput").typeahead({
          minLength: 0,
          highlight: true
        }, {
          source: (function(_this) {
            return function(query, callback) {
              var _ref;
              return (_ref = _this.get("currentCorpus")) != null ? _ref.loadSubcorpora(function(err, corpus) {
                return callback(corpus.get("subcorpora").filter(function(x) {
                  return x.get("name").toLowerCase().match(query.toLowerCase());
                }).toArray());
              }) : void 0;
            };
          })(this),
          displayKey: function(x) {
            return x.get("name");
          }
        }).on("typeahead:opened", (function(_this) {
          return function() {
            return _this.set("subcorpus_typeahead_open", true);
          };
        })(this)).on("typeahead:closed", (function(_this) {
          return function() {
            return _this.set("subcorpus_typeahead_open", false);
          };
        })(this)).on("typeahead:selected", (function(_this) {
          return function() {
            return _this.set("subcorpus_text", $("#subcorpusInput").typeahead("val"));
          };
        })(this));
      }

      MetadataView.prototype.addCorpus = function() {
        return $.ajax({
          url: "/data/corpus",
          dataType: "jsonp",
          type: "PUT",
          data: {
            corpus: this.get("corpus_text")
          },
          success: (function(_this) {
            return function(_arg) {
              var success;
              success = _arg.success;
              if (!success) {
                return console.error("Corpus already exists.");
              }
              return _this.get("corpora").add(new Corpus(_this.get("corpus_text")));
            };
          })(this),
          error: function(request) {
            return console.error(request);
          }
        });
      };

      MetadataView.prototype.addSubcorpus = function() {
        var corpus;
        corpus = this.get("currentCorpus");
        if (corpus == null) {
          return;
        }
        return $.ajax({
          url: "/data/subcorpus",
          dataType: "jsonp",
          type: "PUT",
          data: {
            corpus: corpus.get("name"),
            subcorpus: this.get("subcorpus_text")
          },
          success: (function(_this) {
            return function(_arg) {
              var success;
              success = _arg.success;
              if (!success) {
                return console.error("Subcorpus already exists or Corpus doesn't exist.");
              }
              return corpus.loadSubcorpora(function(err, corpus) {
                return corpus.get("subcorpora").add(new Subcorpus(_this.get("subcorpus_text"), corpus));
              });
            };
          })(this),
          error: function(request) {
            return console.error(request);
          }
        });
      };

      return MetadataView;

    })(Batman.Model);
    AddFilesView = (function(_super) {
      __extends(AddFilesView, _super);

      AddFilesView.accessor("isFilesListEmpty", function() {
        return (exports.context.get("metadataView.currentSubcorpus") == null) || exports.context.get("metadataView.currentSubcorpus.filesList.length") === 0;
      });

      AddFilesView.accessor("sortedFilesList", function() {
        return exports.context.get("metadataView.currentSubcorpus.sortedFilesList");
      });

      AddFilesView.accessor("filesListNextAvailable", function() {
        return exports.context.get("metadataView.currentSubcorpus.filesListNextAvailable");
      });

      AddFilesView.accessor("filesListPrevAvailable", function() {
        return exports.context.get("metadataView.currentSubcorpus.filesListPrevAvailable");
      });

      AddFilesView.accessor("enableAddFiles", function() {
        return exports.context.get("metadataView.currentSubcorpus.status") == null;
      });

      function AddFilesView() {
        $("#dropFiles").dropzone({
          url: "/data/file",
          parallelUploads: 5,
          accept: function(file, callback) {
            return callback(exports.context.get("metadataView.currentSubcorpus") != null ? void 0 : "Error: Corpus / Subcorpus not selected.");
          },
          sending: function(file, xhr, formData) {
            var currentCorpus, currentSubcorpus;
            file.task = new UploadTask(file.name, file.size, (currentCorpus = exports.context.get("metadataView.currentCorpus")), (currentSubcorpus = exports.context.get("metadataView.currentSubcorpus")));
            exports.context.get("pendingTasksView.pendingTasks").add(file.task);
            formData.append("corpus", currentCorpus.get("name"));
            return formData.append("subcorpus", currentSubcorpus.get("name"));
          },
          uploadprogress: function(file, percentDone, bytesSent) {
            return file.task.set("bytesSent", bytesSent);
          },
          success: function(file, res) {
            if (res.success) {
              file.task.set("status", "success");
            } else if (res.status === "extracting") {
              file.task.set("status", "extracting");
              socket.emit("subscribe", res.hash);
              socket.on(res.hash, function(message, result) {
                var from, to, x;
                switch (message) {
                  case "progress":
                    return file.task.set("bytesExtracted", result.bytesDone);
                  case "extracted":
                    return file.task.set("status", "extracted");
                  case "completed":
                    file.task.set("status", "success");
                    from = exports.context.get("metadataView.currentSubcorpus.filesListLoadedFrom");
                    to = exports.context.get("metadataView.currentSubcorpus.filesListLoadedTo");
                    return async.eachSeries(((function() {
                      var _i, _ref, _results;
                      _results = [];
                      for (x = _i = from, _ref = to - 10; _i < _ref; x = _i += 10) {
                        _results.push(x);
                      }
                      return _results;
                    })()).concat(Math.max(to - 10, 0)), function(x, callback) {
                      return exports.context.get("metadataView.currentSubcorpus").forceLoadFilesList(x);
                    });
                }
              });
            } else {
              file.task.set("status", "failure");
            }
            if (res.error != null) {
              return console.error(res.error);
            }
          },
          error: function(file, error) {
            var _ref;
            return (_ref = file.task) != null ? _ref.set("status", "failure") : void 0;
          },
          previewsContainer: document.createElement("div")
        });
      }

      AddFilesView.prototype.loadMoreNextFiles = function() {
        var _ref;
        return exports.context.get("metadataView.currentSubcorpus").loadFilesList(((_ref = exports.context.get("metadataView.currentSubcorpus.filesListLoadedTo")) != null ? _ref : 0) + 1);
      };

      AddFilesView.prototype.loadMorePrevFiles = function() {
        var _ref;
        return exports.context.get("metadataView.currentSubcorpus").loadFilesList(Math.max(((_ref = exports.context.get("metadataView.currentSubcorpus.filesListLoadedFrom")) != null ? _ref : 0) - 10, 0));
      };

      return AddFilesView;

    })(Batman.Model);
    PendingTasksView = (function(_super) {
      __extends(PendingTasksView, _super);

      PendingTasksView.accessor("isEmpty", function() {
        return this.get("pendingTasks.length") === 0;
      });

      function PendingTasksView() {
        PendingTasksView.__super__.constructor.apply(this, arguments);
        this.set("pendingTasks", new Batman.Set);
      }

      return PendingTasksView;

    })(Batman.Model);
    MalletProcessView = (function(_super) {
      __extends(MalletProcessView, _super);

      function MalletProcessView() {
        return MalletProcessView.__super__.constructor.apply(this, arguments);
      }

      MalletProcessView.accessor("status", function() {
        var _ref;
        return (_ref = exports.context) != null ? _ref.get("metadataView.currentSubcorpus.status") : void 0;
      });

      MalletProcessView.accessor("processing", function() {
        return this.get("status") != null;
      });

      MalletProcessView.accessor("processingIngestChunks", function() {
        return this.get("status") === "processingIngestChunks";
      });

      MalletProcessView.accessor("processingTrainTopics", function() {
        return this.get("status") === "processingTrainTopics";
      });

      MalletProcessView.accessor("processingInferTopics", function() {
        return this.get("status") === "processingInferTopics";
      });

      MalletProcessView.accessor("processingStoreProportions", function() {
        return this.get("status") === "processingStoreProportions";
      });

      MalletProcessView.accessor("processedIngestChunks", function() {
        var _ref;
        return (_ref = this.get("status")) === "processingTrainTopics" || _ref === "processingInferTopics" || _ref === "processingStoreProportions" || _ref === "completed";
      });

      MalletProcessView.accessor("processedTrainTopics", function() {
        var _ref;
        return (_ref = this.get("status")) === "processingInferTopics" || _ref === "processingStoreProportions" || _ref === "completed";
      });

      MalletProcessView.accessor("processedInferTopics", function() {
        var _ref;
        return (_ref = this.get("status")) === "processingStoreProportions" || _ref === "completed";
      });

      MalletProcessView.accessor("processedStoreProportions", function() {
        var _ref;
        return (_ref = this.get("status")) === "completed";
      });

      MalletProcessView.accessor("notprocessedIngestChunks", function() {
        return !this.get("processingIngestChunks") && !this.get("processedIngestChunks");
      });

      MalletProcessView.accessor("notprocessedTrainTopics", function() {
        return !this.get("processingTrainTopics") && !this.get("processedTrainTopics");
      });

      MalletProcessView.accessor("notprocessedInferTopics", function() {
        return !this.get("processingInferTopics") && !this.get("processedInferTopics");
      });

      MalletProcessView.accessor("notprocessedStoreProportions", function() {
        return !this.get("processingStoreProportions") && !this.get("processedStoreProportions");
      });

      MalletProcessView.prototype.startTopicModeling = function() {
        var corpus, subcorpus;
        corpus = exports.context.get("metadataView.currentCorpus");
        subcorpus = exports.context.get("metadataView.currentSubcorpus");
        return $.ajax({
          url: "/data/startTopicModeling",
          dataType: "jsonp",
          type: "POST",
          data: {
            corpus: corpus.get("name"),
            subcorpus: subcorpus.get("name"),
            num_topics: 50
          },
          success: (function(_this) {
            return function(_arg) {
              var error, hash, success;
              success = _arg.success, hash = _arg.hash, error = _arg.error;
              if (!success) {
                return console.error(error);
              }
              subcorpus.set("status", "processingIngestChunks");
              console.log("processingIngestChunks");
              return subcorpus.subscribeToProcessEvents(hash);
            };
          })(this),
          error: function(request) {
            return console.error(request);
          }
        });
      };

      return MalletProcessView;

    })(Batman.Model);
    return UploadTask = (function(_super) {
      __extends(UploadTask, _super);

      UploadTask.accessor("friendlyFileSize", function() {
        var order, suffixes;
        suffixes = ["KiB", "MiB", "GiB", "TiB"];
        order = Math.min(parseInt(Math.log(this.get("fileSize") + 1) / Math.log(1024)), 4);
        if (order === 0) {
          return "" + (this.get("fileSize")) + " bytes";
        } else {
          return "" + ((this.get("fileSize") / Math.pow(1024, order)).toFixed(2)) + " " + suffixes[order - 1];
        }
      });

      UploadTask.accessor("percentDone", function() {
        return this.get("bytesSent") / this.get("fileSize") * 100;
      });

      UploadTask.accessor("percentExtractionDone", function() {
        return this.get("bytesExtracted") / this.get("fileSize") * 100;
      });

      UploadTask.accessor("success", function() {
        return this.get("status") === "success";
      });

      UploadTask.accessor("failure", function() {
        return this.get("status") === "failure";
      });

      UploadTask.accessor("extracting", function() {
        return this.get("status") === "extracting";
      });

      UploadTask.accessor("extracted", function() {
        return this.get("status") === "extracted";
      });

      UploadTask.accessor("isArchive", function() {
        var _ref;
        return (_ref = this.get("status")) === "extracted" || _ref === "extracting";
      });

      function UploadTask(fileName, fileSize, corpus, subcorpus) {
        UploadTask.__super__.constructor.apply(this, arguments);
        this.set("fileName", fileName);
        this.set("corpus", corpus);
        this.set("subcorpus", subcorpus);
        this.set("fileSize", fileSize);
        this.set("bytesSent", 0);
        this.observe("status", function(success, extracted) {
          if (success === "success" && extracted !== "extracted") {
            return exports.context.get("metadataView.currentSubcorpus.filesList").add(fileName);
          }
        });
      }

      return UploadTask;

    })(Batman.Model);
  })(Curation);
  Corpus = (function(_super) {
    __extends(Corpus, _super);

    function Corpus(name) {
      Corpus.__super__.constructor.apply(this, arguments);
      this.set("name", name);
      this.set("subcorpora", new Batman.Set);
    }

    Corpus.prototype.loadSubcorpora = function(callback) {
      if (this.get("isSubcorporaLoaded")) {
        return typeof callback === "function" ? callback(null, this) : void 0;
      }
      return $.ajax({
        url: "/data/subcorporaList",
        dataType: "jsonp",
        data: {
          corpus: this.get("name"),
          processedOnly: window.location.pathname === "/topics"
        },
        success: (function(_this) {
          return function(response) {
            var _ref;
            (_ref = _this.get("subcorpora")).add.apply(_ref, response.subcorpora.map(function(x) {
              return new Subcorpus(x, _this);
            }));
            _this.set("isSubcorporaLoaded", true);
            return typeof callback === "function" ? callback(null, _this) : void 0;
          };
        })(this),
        error: function(request) {
          console.error(request);
          return typeof callback === "function" ? callback(request) : void 0;
        }
      });
    };

    return Corpus;

  })(Batman.Model);
  Subcorpus = (function(_super) {
    __extends(Subcorpus, _super);

    Subcorpus.accessor("isFilesListEmpty", function() {
      return this.get("filesList.length") === 0;
    });

    Subcorpus.accessor("sortedFilesList", function() {
      return this.get("filesList.toArray").sort(function(a, b) {
        return a.localeCompare(b);
      });
    });

    function Subcorpus(name, corpus) {
      Subcorpus.__super__.constructor.apply(this, arguments);
      this.set("name", name);
      this.set("corpus", corpus);
      this.set("filesList", new Batman.Set);
      this.set("topics", new Batman.Set);
    }

    Subcorpus.prototype.loadFilesList = function(from, callback) {
      var x;
      if (__indexOf.call((function() {
        var _i, _j, _len, _ref, _ref1, _ref2, _results, _results1;
        _ref = [from, from + 9];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(__indexOf.call((function() {
            _results1 = [];
            for (var _j = _ref1 = this.get("filesListLoadedFrom"), _ref2 = this.get("filesListLoadedTo"); _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; _ref1 <= _ref2 ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this), x) >= 0);
        }
        return _results;
      }).call(this), false) < 0) {
        return typeof callback === "function" ? callback(null, this) : void 0;
      }
      return this.forceLoadFilesList(from, callback);
    };

    Subcorpus.prototype.forceLoadFilesList = function(from, callback) {
      return $.ajax({
        url: "/data/filesList",
        dataType: "jsonp",
        data: {
          corpus: this.get("corpus.name"),
          subcorpus: this.get("name"),
          from: from
        },
        success: (function(_this) {
          return function(response) {
            var _ref, _ref1, _ref2, _ref3, _ref4;
            (_ref = _this.get("filesList")).add.apply(_ref, response.files);
            if (response.fileIndices.from >= _this.get("filesListLoadedFrom") && response.fileIndices.to <= _this.get("filesListLoadedTo")) {

            } else if (!(response.fileIndices.from > _this.get("filesListLoadedFrom"))) {
              _this.set("filesListLoadedFrom", response.fileIndices.from);
              _this.set("filesListLoadedTo", Math.max(response.fileIndices.to, Math.min(response.fileIndices.from + 29, (_ref1 = _this.get("filesListLoadedTo")) != null ? _ref1 : 0)));
              (_ref2 = _this.get("filesList")).remove.apply(_ref2, (_this.get("filesList.toArray").sort(function(a, b) {
                return a.localeCompare(b);
              }).slice(30)));
            } else if (!(response.fileIndices.to < _this.get("filesListLoadedTo"))) {
              _this.set("filesListLoadedTo", response.fileIndices.to);
              _this.set("filesListLoadedFrom", Math.min(response.fileIndices.from, Math.max(response.fileIndices.to - 29, (_ref3 = _this.get("filesListLoadedFrom")) != null ? _ref3 : 0)));
              (_ref4 = _this.get("filesList")).remove.apply(_ref4, (_this.get("filesList.toArray").sort(function(a, b) {
                return a.localeCompare(b);
              }).slice(0, -30)));
            }
            if (typeof callback === "function") {
              callback(null, _this);
            }
            _this.set("filesListNextAvailable", _this.get("filesListLoadedTo") + 1 < response.totalFiles);
            return _this.set("filesListPrevAvailable", _this.get("filesListLoadedFrom") > 0);
          };
        })(this),
        error: function(request) {
          console.error(request);
          return typeof callback === "function" ? callback(request) : void 0;
        }
      });
    };

    Subcorpus.prototype.loadStatus = function() {
      this.set("loaded", false);
      return $.ajax({
        url: "/data/subcorpusStatus",
        dataType: "jsonp",
        type: "GET",
        data: {
          corpus: this.get("corpus.name"),
          subcorpus: this.get("name")
        },
        success: (function(_this) {
          return function(_arg) {
            var error, hash, status, success;
            success = _arg.success, status = _arg.status, hash = _arg.hash, error = _arg.error;
            if (!success) {
              return console.error(error);
            }
            if (status !== "not processed" && status !== "completed") {
              _this.set("status", status);
              _this.subscribeToProcessEvents(hash);
            }
            return _this.set("loaded", true);
          };
        })(this),
        error: function(request) {
          console.error(request);
          return this.set("loaded", true);
        }
      });
    };

    Subcorpus.prototype.subscribeToProcessEvents = function(hash) {
      console.log("Subscribing to hash " + hash);
      socket.emit("subscribe", hash);
      return socket.on(hash, (function(_this) {
        return function(message) {
          switch (message) {
            case "processingTrainTopics":
              _this.set("status", "processingTrainTopics");
              return console.log("processingTrainTopics");
            case "processingInferTopics":
              _this.set("status", "processingInferTopics");
              return console.log("processingInferTopics");
            case "processingStoreProportions":
              _this.set("status", "processingStoreProportions");
              return console.log("processingStoreProportions");
            case "completed":
              _this.set("status", "completed");
              return console.log("completed");
          }
        };
      })(this));
    };

    Subcorpus.prototype.loadTopics = function(callback) {
      if (this.get("isTopicsLoaded")) {
        return typeof callback === "function" ? callback(null, this) : void 0;
      }
      return $.ajax({
        url: "/data/topicsList",
        dataType: "jsonp",
        data: {
          corpus: this.get("corpus.name")
        },
        success: (function(_this) {
          return function(response) {
            var _ref;
            (_ref = _this.get("topics")).add.apply(_ref, response.map(function(x) {
              return new Topic(x, _this);
            }));
            _this.set("isTopicsLoaded", true);
            return typeof callback === "function" ? callback(null, _this) : void 0;
          };
        })(this),
        error: function(request) {
          console.error(request);
          return typeof callback === "function" ? callback(request) : void 0;
        }
      });
    };

    return Subcorpus;

  })(Batman.Model);
  Topic = (function(_super) {
    __extends(Topic, _super);

    Topic.accessor("filteredRecords", function() {
      var _ref;
      return (_ref = this.get("records")) != null ? _ref.map((function(_this) {
        return function(record, idx) {
          return {
            record: record,
            active: record === _this.get("activeRecord")
          };
        };
      })(this)) : void 0;
    });

    Topic.accessor("toggleHidden_text", function() {
      return "" + (this.get("hidden") ? "Unhide" : "Hide") + " Topic";
    });

    function Topic(_arg, subcorpus) {
      var hidden, id, name;
      id = _arg.id, name = _arg.name, hidden = _arg.hidden;
      Topic.__super__.constructor.apply(this, arguments);
      this.set("id", id);
      this.set("name", name);
      this.set("hidden", hidden);
      this.set("isLoaded", false);
      this.set("subcorpus", subcorpus);
      this.set("records", new Batman.Set);
      this.set("words", new Batman.Set);
      this.set("phrases", new Batman.Set);
    }

    Topic.prototype.onReady = function(callback) {
      if (this.get("isLoaded")) {
        return setTimeout(((function(_this) {
          return function() {
            return callback(null, _this);
          };
        })(this)), 0);
      }
      return $.ajax({
        url: "/data/topicDetails",
        dataType: "jsonp",
        data: {
          corpus: this.get("subcorpus.corpus.name"),
          subcorpus: this.get("subcorpus.name"),
          id: this.get("id")
        },
        success: (function(_this) {
          return function(response) {
            var _ref, _ref1, _ref2;
            _this.set("id", response.id);
            _this.set("name", response.name);
            (_ref = _this.get("words")).add.apply(_ref, response.words);
            (_ref1 = _this.get("phrases")).add.apply(_ref1, response.phrases);
            (_ref2 = _this.get("records")).add.apply(_ref2, response.records.map(function(x) {
              return new Record(x, _this);
            }));
            _this.set("isLoaded", true);
            return callback(null, _this);
          };
        })(this),
        error: function(request) {
          console.error(request);
          return callback(request);
        }
      });
    };

    Topic.prototype.gotoRecord = function(node) {
      var _ref;
      return (_ref = this.get("records").filter(function(x) {
        return x.get("article_id") === $(node).children("span").text();
      }).toArray()[0]) != null ? _ref.onReady((function(_this) {
        return function(err, record) {
          return _this.set("activeRecord", record);
        };
      })(this)) : void 0;
    };

    Topic.prototype.showRenameDialog = function() {
      this.set("renameTopic_text", this.get("name"));
      return $("#renameTopicModal").modal("show");
    };

    Topic.prototype.renameTopic = function() {
      return $.ajax({
        url: "/data/renameTopic",
        dataType: "jsonp",
        type: "POST",
        data: {
          corpus: this.get("subcorpus.corpus.name"),
          subcorpus: this.get("subcorpus.name"),
          id: this.get("id"),
          name: this.get("renameTopic_text")
        },
        success: (function(_this) {
          return function(response) {
            _this.set("name", _this.get("renameTopic_text"));
            if (appContext.get("topicsContext.currentTopic") === _this) {
              appContext.set("topicsContext.topicSearch_text", _this.get("name"));
            }
            return $("#renameTopicModal").modal("hide");
          };
        })(this),
        error: function(request) {
          return console.error(request);
        }
      });
    };

    Topic.prototype.toggleHidden = function() {
      return $.ajax({
        url: "/data/setTopicHidden",
        dataType: "jsonp",
        type: "POST",
        data: {
          corpus: this.get("subcorpus.corpus.name"),
          subcorpus: this.get("subcorpus.name"),
          id: this.get("id"),
          hidden: !this.get("hidden")
        },
        success: (function(_this) {
          return function(response) {
            return _this.set("hidden", !_this.get("hidden"));
          };
        })(this),
        error: function(request) {
          return console.error(request);
        }
      });
    };

    return Topic;

  })(Batman.Model);
  Record = (function(_super) {
    __extends(Record, _super);

    Record.accessor("proportionPie", function() {
      var p;
      p = 100 * this.get("proportion");
      if (p > 99.99) {
        p = 99.99;
      }
      return "M 18 18\nL 33 18\nA 15 15 0 " + (p < 50 ? 0 : 1) + " 0 " + (18 + 15 * Math.cos(p * Math.PI / 50)) + " " + (18 - 15 * Math.sin(p * Math.PI / 50)) + "\nZ";
    });

    Record.accessor("proportionTooltip", function() {
      return "Proportion: " + ((this.get("proportion") * 100).toFixed(2)) + "%";
    });

    function Record(_arg, topic) {
      var article_id, proportion;
      article_id = _arg.article_id, proportion = _arg.proportion;
      Record.__super__.constructor.apply(this, arguments);
      this.set("article_id", article_id);
      this.set("proportion", proportion);
      this.set("isLoaded", false);
      this.set("topic", topic);
    }

    Record.prototype.onReady = function(callback) {
      if (this.get("isLoaded")) {
        return callback(null, this);
      }
      return $.ajax({
        url: "/data/article",
        dataType: "jsonp",
        data: {
          corpus: this.get("topic.subcorpus.corpus.name"),
          subcorpus: this.get("topic.subcorpus.name"),
          article_id: this.get("article_id")
        },
        success: (function(_this) {
          return function(response) {
            _this.set("article_id", response.article_id);
            _this.set("article", response.article);
            _this.set("isLoaded", true);
            return callback(null, _this);
          };
        })(this),
        error: function(request) {
          console.error(request);
          return callback(request);
        }
      });
    };

    return Record;

  })(Batman.Model);
  STM = (function(_super) {
    __extends(STM, _super);

    function STM() {
      return STM.__super__.constructor.apply(this, arguments);
    }

    STM.appContext = appContext = new AppContext;

    return STM;

  })(Batman.App);
  STM.run();
  return $(function() {
    appContext.set("pageLoaded", true);
    $("[data-toggle='tooltip']").tooltip();
    return setInterval((function() {
      return $("#relatedArticles svg:not([data-ttd='true'])").tooltip().attr("data-ttd", true);
    }), 1000);
  });
});
